import { EasyEffect, Effect, ItemEffect, ItemType, PropName, RefinedGroupedEffects } from "../types";
export declare function easyEffectToEffect<T_EasyEffect extends EasyEffect<any>>(easyEffect: T_EasyEffect): Effect;
export declare function itemEffectToEffect<K_Type extends ItemType, K_PropName extends PropName<K_Type>>(itemEffect: ItemEffect<K_Type, K_PropName>): Effect;
export declare function _startEffect(newEffect: Effect): void;
export declare function _stopEffect(effectName: string): void;
export declare function toSafeEffectId(prefix?: string): string;
export declare function startNewEffect<K_Type extends ItemType>(theEffect: EasyEffect<K_Type>): void;
export declare function startNewItemEffect<K_Type extends ItemType, K_PropName extends PropName<K_Type>>(itemEffect: ItemEffect<K_Type, K_PropName>): string;
export declare function stopNewEffect(effectName: string): void;
export declare function startEffect<K_EffectGroup extends keyof RefinedGroupedEffects, K_EffectName extends keyof RefinedGroupedEffects[K_EffectGroup] & string>(groupName: K_EffectGroup, effectName: K_EffectName): void;
export declare function stopEffect<K_EffectGroup extends keyof RefinedGroupedEffects, K_EffectName extends keyof RefinedGroupedEffects[K_EffectGroup] & string>(groupName: K_EffectGroup, effectName: K_EffectName): void;
export declare function startGroupEffects<K_EffectGroup extends keyof RefinedGroupedEffects>(groupName: K_EffectGroup): void;
export declare function stopGroupEffects<K_EffectGroup extends keyof RefinedGroupedEffects>(groupName: K_EffectGroup): void;
export declare function startAllGroupsEffects(): void;
export declare function stopAllGroupsEffects(): void;
export declare function runEffect<K_EffectGroup extends keyof RefinedGroupedEffects, K_EffectName extends keyof RefinedGroupedEffects[K_EffectGroup] & string>(groupName: K_EffectGroup, effectName: K_EffectName): void;
export declare function runGroupEffects<K_EffectGroup extends keyof RefinedGroupedEffects>(groupName: K_EffectGroup): void;
export type MakeEffect = <K_Type extends ItemType>(easyEffect: EasyEffect<K_Type>) => Effect;
export type MakeItemEffect = <K_Type extends ItemType, K_PropName extends PropName<K_Type>>(itemEffect: ItemEffect<K_Type, K_PropName>) => Effect;
export declare function makeEffect<K_Type extends ItemType>(easyEffect: EasyEffect<K_Type>): Effect;
export declare function makeItemEffect<K_Type extends ItemType, K_PropName extends PropName<K_Type>>(itemEffect: ItemEffect<K_Type, K_PropName>): Effect;
export declare function makeEffects<K_EffectName extends string>(effectsToAdd: (arg0: {
    itemEffect: MakeItemEffect;
    effect: MakeEffect;
}) => Record<K_EffectName, Effect>): Record<K_EffectName, Effect>;
export declare function initGroupedEffects<T extends Record<string, ReturnType<typeof makeEffects>>>(groups: T): T;
