import { RepondTypes } from "../declarations";
import { Effect, ItemType } from "../types";
type RemoveEffectsSuffix<T extends string> = (T extends `${infer Prefix}Effects` ? Prefix : T) & string;
export type RefinedEffectGroups = {
    [K in keyof RepondTypes["EffectGroups"] as RemoveEffectsSuffix<K>]: RepondTypes["EffectGroups"][K];
};
export declare function startNewEffect(theEffect: Effect): string;
export declare function startEffect<K_EffectGroup extends keyof RefinedEffectGroups, K_EffectName extends keyof RefinedEffectGroups[K_EffectGroup] & string>(effectId: `${K_EffectGroup}.${K_EffectName}` | string): void;
export declare function stopEffect<K_EffectGroup extends keyof RefinedEffectGroups, K_EffectName extends keyof RefinedEffectGroups[K_EffectGroup] & string>(effectId: `${K_EffectGroup}.${K_EffectName}` | string): void;
export declare function startEffectsGroup<K_EffectGroup extends keyof RefinedEffectGroups>(groupName: K_EffectGroup & string): void;
export declare function stopEffectsGroup<K_EffectGroup extends keyof RefinedEffectGroups>(groupName: K_EffectGroup & string): void;
export declare function startAllEffectsGroups(): void;
export declare function stopAllEffectsGroups(): void;
export declare function runEffect<K_EffectGroup extends keyof RefinedEffectGroups, K_EffectName extends keyof RefinedEffectGroups[K_EffectGroup] & string>(effectId: `${K_EffectGroup}.${K_EffectName}` | string): void;
export declare function runEffectsGroup<K_EffectGroup extends keyof RefinedEffectGroups>(groupName: K_EffectGroup & string): void;
export type MakeEffect = <K_Type extends ItemType>(effectRun: Effect["run"], effectOptions: Omit<Effect, "run">) => Effect;
export declare function makeEffect<K_Type extends ItemType>(effectRun: Effect["run"], effectOptions: Omit<Effect, "run">): Effect;
export declare function makeEffects<K_EffectName extends string>(getEffectsToAddCallback: (makeEffect: MakeEffect) => Record<K_EffectName, Effect>): Record<K_EffectName, Effect>;
export declare function initEffectGroups<T extends Record<string, ReturnType<typeof makeEffects>>>(groups: T): T;
export {};
